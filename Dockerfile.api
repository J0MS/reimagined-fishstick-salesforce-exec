# Sales Force API Dockerfile.
#
#Copyright 2025 Salesforce Inc.
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

# -------------------------------------------------------------------------


# Base stage
ARG PYTHON_VERSION=3.10
FROM python:${PYTHON_VERSION}-slim AS base

# Crear usuario no privilegiado
ARG UID=10001
RUN adduser --disabled-password --gecos "" --home "/app" --shell "/sbin/nologin" --uid "${UID}" appuser

# Variables de entorno
ENV PYTHONPATH="/usr/local/lib/python3.10/site-packages"
WORKDIR /app

# Dependencias del sistema necesarias para pyodbc u otras libs
RUN apt-get update && \
    apt-get install -y gcc g++ libgssapi-krb5-2 curl jq && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Copiar requirements y cache pip
COPY requirements.txt .
RUN pip install --upgrade pip
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir -r requirements.txt

# -------------------------------------------------------------------------
# Production stage
# -------------------------------------------------------------------------
FROM python:${PYTHON_VERSION}-slim AS production

# Crear usuario no privilegiado
ARG UID=10001
RUN adduser --disabled-password --gecos "" --home "/app" --shell "/sbin/nologin" --uid "${UID}" appuser

WORKDIR /app
USER appuser

# Copiar dependencias desde base
COPY --from=base /usr/local/lib/python3.10 /usr/local/lib/python3.10
COPY --from=base /usr/local/bin /usr/local/bin

# Copiar solo la app
COPY ./src ./src

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# CMD JSON recomendado para Kubernetes (recibir correctamente SIGTERM)
CMD ["uvicorn", "src.main:api", "--host", "0.0.0.0", "--port", "8000"]

# -------------------------------------------------------------------------
# Testing stage
# -------------------------------------------------------------------------
FROM base AS testing
USER root
RUN pip install httpx pytest pytest-dotenv pytest-cov pytest-xdist pytest-mock
COPY ./tests/ src/tests/
COPY ./src src/src

# Unit tests
FROM testing AS unit_test
CMD ["bash", "-c", "pytest --cov-config=.coveragerc src/tests/unit_test --junitxml=reports/unittest.xml --cov-report=xml:reports/coverage.xml --cov-report=html:reports/coverage_report.html --cov-report=term-missing --cov=src | tee reports/pytest-coverage.txt"]

# Integration tests
FROM testing AS integration_test
CMD ["bash", "-c", "pytest --cov-config=.coveragerc src/tests/integration_test --junitxml=reports/integration.xml --cov-report term-missing --cov=src | tee reports/pytest-coverage.txt"]

